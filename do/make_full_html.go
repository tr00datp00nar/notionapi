package main

import (
	"os"
	"path/filepath"
	"strings"

	"github.com/kjk/u"
)

/*
Wrap HTML fragment generated by tohtml.ToHTML() if more HTML
to make it fully stand-alone page
*/

var (
	htmlWrap = `
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1">

		<style>
	{{ css }}
		</style>
	</head>

<body>
{{ htmlBody }}
</body>

</html>
`
)

var (
	cssFromFile  []byte
	fullHTMLWrap string
)

func loadCSS() string {
	if len(cssFromFile) > 0 {
		return string(cssFromFile)
	}
	currDir, err := filepath.Abs(".")
	must(err)
	path1 := filepath.Join("main.css")
	cssFromFile = u.ReadFileMust(path1)
	if len(cssFromFile) > 0 {
		return string(cssFromFile)
	}
	path2 := filepath.Join("do", "main.css")
	cssFromFile = u.ReadFileMust(path2)
	if len(cssFromFile) > 0 {
		return string(cssFromFile)
	}
	logf("couldn't load css from the following files:\n'%s'\n'%s'\nCurr directory: %s\n", path1, path2, currDir)
	os.Exit(1)
	return ""
}

func getFullHTMLWrap() string {
	if len(fullHTMLWrap) == 0 {
		css := loadCSS()
		fullHTMLWrap = strings.Replace(htmlWrap, "{{ css }}", css, -1)
		if fullHTMLWrap == htmlWrap {
			panic("failed to replace {{ css }} in htmlWrap")
		}
	}
	return fullHTMLWrap
}

// wrap HTML body in more HTML to create a full, stand-alone HTML page
func makeFullHTML(htmlBody []byte) []byte {
	wrap := getFullHTMLWrap()
	html := strings.Replace(wrap, "{{ htmlBody }}", string(htmlBody), -1)
	if len(htmlBody) > 0 && wrap == html {
		panic("failed to replace {{ htmlBody }} in fullHTMLWrap")
	}
	return []byte(html)
}
